<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.fengzihub.p2p.base.mapper.UserFileMapper" >
  <resultMap id="BaseResultMap" type="cn.fengzihub.p2p.base.domain.UserFile" >
    <id column="id" property="id" />
    <result column="state" property="state" />
    <result column="remark" property="remark" />
    <result column="auditTime" property="auditTime" />
    <result column="applyTime" property="applyTime" />
    <result column="score" property="score" />
    <result column="image" property="image" />

    <association property="applier" columnPrefix="ap_" javaType="cn.fengzihub.p2p.base.domain.Logininfo">
      <id column="id" property="id"/>
      <result column="username" property="username"/>
    </association>
    <association property="auditor" columnPrefix="au_" javaType="cn.fengzihub.p2p.base.domain.Logininfo">
      <id column="id" property="id"/>
      <result column="username" property="username"/>
    </association>

    <association property="fileType" column="fileType_id"
                 javaType="cn.fengzihub.p2p.base.domain.SystemDictionaryItem"
                 select="cn.fengzihub.p2p.base.mapper.SystemDictionaryItemMapper.selectByPrimaryKey"/>

  </resultMap>

  <insert id="insert" parameterType="cn.fengzihub.p2p.base.domain.UserFile" useGeneratedKeys="true" keyProperty="id" >
    insert into `userfile` (state, remark, auditTime, applyTime, auditor_id, applier_id, 
      score, image, fileType_id)
    values (#{state}, #{remark}, #{auditTime}, #{applyTime}, #{auditor.id}, #{applier.id},
      #{score}, #{image}, #{fileType.id})
  </insert>
  <update id="updateByPrimaryKey" parameterType="cn.fengzihub.p2p.base.domain.UserFile" >
    update `userfile`
    set state = #{state},
      remark = #{remark},
      auditTime = #{auditTime},
      applyTime = #{applyTime},
      auditor_id = #{auditor.id},
      applier_id = #{applier.id},
      score = #{score},
      image = #{image},
      fileType_id = #{fileType.id}
    where id = #{id}
  </update>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select us.id, us.state, us.remark, us.filetype_id,us.auditTime, us.applyTime,us.score, us.image,
    ap.id ap_id,ap.username ap_username,
    au.id au_id,au.username au_username
    from `userfile` us join logininfo ap ON us.applier_id=ap.id
    LEFT join logininfo au on us.auditor_id=au.id
    where us.id = #{id}
  </select>
  <select id="querySelectFileTypeList" resultMap="BaseResultMap" >
      select us.id, us.state, us.remark, us.fileType_id,us.auditTime, us.applyTime,us.score, us.image,
    ap.id ap_id,ap.username ap_username,
    au.id au_id,au.username au_username
    from `userfile` us join logininfo ap ON us.applier_id=ap.id
    LEFT join logininfo au on us.auditor_id=au.id
    where us.applier_id = #{userId}
  </select>
  <select id="selectFileTypeByCondition" resultMap="BaseResultMap" >
     select us.id, us.state, us.remark, us.fileType_id,us.auditTime, us.applyTime,us.score, us.image,
    ap.id ap_id,ap.username ap_username,
    au.id au_id,au.username au_username
    from `userfile` us join logininfo ap ON us.applier_id=ap.id
    LEFT join logininfo au on us.auditor_id=au.id
    where us.applier_id = #{userId}
    <if test="isSelectFileType">
      and us.fileType_id is not null
    </if>
    <if test="!isSelectFileType">
      and us.fileType_id is null
    </if>
  </select>


  <sql id="where_sql">
    <where>
      <if test="selectFileType">
        and us.fileType_id is not null
      </if>
    </where>
  </sql>
  <select id="queryForCount" resultType="java.lang.Integer">
    select count(us.id)
    from userfile us join logininfo ap ON
    us.auditor_id = ap.id LEFT join logininfo au ON
    us.applier_id = ap.id
    <include refid="where_sql"/>
  </select>
  <select id="queryForList" resultMap="BaseResultMap">
      select us.id, us.state, us.remark, us.fileType_id,us.auditTime, us.applyTime,us.score, us.image,
    ap.id ap_id,ap.username ap_username,
    au.id au_id,au.username au_username
    from `userfile` us join logininfo ap ON us.applier_id=ap.id
    LEFT join logininfo au on us.auditor_id=au.id
    <include refid="where_sql"/>
    LIMIT #{start},#{rows}
  </select>
  <select id="queryByUserId" resultMap="BaseResultMap">
     select us.id, us.state, us.remark, us.fileType_id,us.auditTime, us.applyTime,us.score, us.image,
    ap.id ap_id,ap.username ap_username,
    au.id au_id,au.username au_username
    from `userfile` us join logininfo ap ON us.applier_id=ap.id
    LEFT join logininfo au on us.auditor_id=au.id
    where us.applier_id = #{userId} and us.state = #{state}
  </select>

</mapper>